name: Release Python Project for Windows

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest  # Use Windows runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install auto-py-to-exe
      run: |
        python -m pip install --upgrade pip
        pip install auto-py-to-exe
        # If you have other dependencies in requirements.txt, you can install them here:
        # pip install -r requirements.txt

    - name: Create .exe using auto-py-to-exe
      run: |
        # Create a temporary directory to store the build configuration file
        mkdir -p temp_build_dir
        
        # Define the auto-py-to-exe configuration in a JSON file
        echo '{ 
          "script": "MetrologyTestInterface.py", 
          "onefile": true, 
          "console": false,
          "hidden-imports": ["matplotlib.backends.backend-pdf"],
          "add-data": [
            "C:/Program Files (x86)/Aerotech/Controller Version Selector/Bin/Automation1/2.7.1/release/APIs/Python/automation1/automation1/references/Automation1C.dll;automation1/references/Automation1C.dll",
            "C:/Program Files (x86)/Aerotech/Controller Version Selector/Bin/Automation1/2.7.1/release/APIs/Python/automation1/automation1/references/Automation1C64.dll;automation1/references/Automation1C64.dll",
            "C:/Program Files (x86)/Aerotech/Controller Version Selector/Bin/Automation1/2.7.1/release/APIs/Python/automation1/automation1/references/Automation1Compiler.dll;automation1/references/Automation1Compiler.dll",
            "C:/Program Files (x86)/Aerotech/Controller Version Selector/Bin/Automation1/2.7.1/release/APIs/Python/automation1/automation1/references/Automation1Compiler64.dll;automation1/references/Automation1Compiler64.dll",
            "C:/Users/tbates/Python/RotaryAndAngles/AerotechDataCal.py;AerotechDataCal.py",
            "C:/Users/tbates/Python/RotaryAndAngles/AerotechFormat.py;AerotechFormat.py",
            "C:/Users/tbates/Python/RotaryAndAngles/AerotechLogo.png;AerotechLogo.png",
            "C:/Users/tbates/Python/RotaryAndAngles/AerotechPDF.py;AerotechPDF.py",
            "C:/Users/tbates/Python/RotaryAndAngles/AngularTest.py;AngularTest.py",
            "C:/Users/tbates/Python/RotaryAndAngles/Logger.py;Logger.py",
            "C:/Users/tbates/Python/RotaryAndAngles/RotaryCalTest.py;RotaryCalTest.py",
            "C:/Users/tbates/Python/RotaryAndAngles/RS232.py;RS232.py"
          ]
        }' > temp_build_dir/build_config.json
        
        # Run auto-py-to-exe in command-line mode using the configuration file
        python -m auto_py_to_exe --config temp_build_dir/build_config.json --output-dir dist


    - name: Check dist directory
      run: dir dist  # Use 'dir' on Windows to list directory contents

    - name: Upload .exe Artifact
      uses: actions/upload-artifact@v4
      with:
        name: application
        path: dist/MetrologyTestInterface.exe

  release:
    needs: build
    runs-on: ubuntu-latest  # Use Ubuntu for the release job to utilize GitHub CLI

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: application

    - name: Install GitHub CLI
      run: sudo apt-get install gh -y

    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        tag: "v1.0.0-${{ github.run_number }}"
      run: |
        gh release create "$tag" \
            --repo="$GITHUB_REPOSITORY" \
            --title="${tag#v}" \
            --generate-notes \
            MetrologyTestInterface.exe
